[
  {
    "signed_content": {
      "signatures": [
        {
          "header": {
            "kid": "webstore"
          }, 
          "protected": "eyJhbGciOiJSUzI1NiJ9", 
          "signature": "D71LoS49oX2o4oCtGWznuvV_ZBDMxOYRQMgjBspvA5KQSFB8wYVukYp_bL2J9fPwN7R2qEjZDeQbFwqVMEj1W2FhKBwK9NXouyk8svqjpYAIM4QxU-kNIWtJniD88EvXn9bQP5NnnWxa2tzA2gG035I13GAz6D40VSkNIL5KwNQigQzQ5n8zL5FlxhIWB8VlYRLNd-LiWPdgM_HZDSeinbkxMqTq4nzmJwp7eEjO-k1vC8Vwa0Xpep1BCTm1L-NSk_F8rPsLJQKT8pnlz38QfRQM8zNl_HoED8tcdNIVplwu6In_mEhEaX1owcHjS3tct6i_5vdnmqczdtmL1p5CQw"
        }
      ], 
      "payload": ""
    }, 
    "description": "treehash per file"
  }
]