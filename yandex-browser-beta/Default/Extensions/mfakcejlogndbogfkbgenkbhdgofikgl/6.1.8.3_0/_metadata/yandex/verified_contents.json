[
  {
    "signed_content": {
      "signatures": [
        {
          "header": {
            "kid": "webstore"
          }, 
          "protected": "eyJhbGciOiJSUzI1NiJ9", 
          "signature": "ps_sO4F9nGAzrBz9zZ987n6mRhJuNEumOxH2IrqD9ouJWLYaN7PnKWFJ0a9dab2yldplQAru6-rqTiDiNpu1-oPEPTV7Rkmf0xhY74qcPeyCXdFg1IYGpXziC6SsomjloGlhvhp336mAEDB6jwDm3f5nYntgTY0aMo6TwmmkxUdFBNL3n3VYkw5jeuWvOhyEBjAwCq56SZzgJYysWDXH9GAXyFUyKDBjEiNT_5NYOXiA0KU3zr1_qf6CwzbJF6vl_btkSFP_5L9g_M9vhyac4W0IOSeZ9LM3_-YGiuCrr6Z5LjRgtTAD0lxlxgzk70qZxUxA3vBd0kcVfQBxNBFftQ"
        }
      ], 
      "payload": ""
    }, 
    "description": "treehash per file"
  }
]